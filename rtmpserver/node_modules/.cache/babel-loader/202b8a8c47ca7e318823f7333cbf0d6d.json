{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\w_yil\\\\OneDrive\\\\Desktop\\\\twitch\\\\client\\\\src\\\\components\\\\streams\\\\StreamEdit.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\"; // wiring up the action for data loading, as well as the editStream action creator\n\nimport { fetchStream, editStream } from \"../../actions\";\nimport StreamForm from './'; // With React-Router, each component needs to be designed to work in isolation, meaning it has to pre-fetch its own data.\n\nclass StreamEdit extends React.Component {\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id);\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, this.props.stream.title);\n  }\n\n} // takes your application state from the store and passes it to your component as a prop.\n// when you have 2 sources of information coming from the StreamEdit props, as well as mapStateToProps, the ownProps arg would also reference the same props from StreamEdit\n\n\nconst mapStateToProps = (state, ownProps) => {\n  // we are going into the streams object containing a list of streams, and the keys to the streams are stream Ids\n  // after this function runs, the stream prop is created and has the object taken from the state obj with the id taken from the ownProps arg.\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, // passing the action creator into the connect function\n{\n  fetchStream\n})(StreamEdit);","map":{"version":3,"sources":["C:\\Users\\w_yil\\OneDrive\\Desktop\\twitch\\client\\src\\components\\streams\\StreamEdit.js"],"names":["React","connect","fetchStream","editStream","StreamForm","StreamEdit","Component","componentDidMount","props","match","params","id","render","stream","title","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,eAAxC;AACA,OAAOC,UAAP,MAAuB,IAAvB,C,CAEA;;AAEA,MAAMC,UAAN,SAAyBL,KAAK,CAACM,SAA/B,CAAyC;AACvCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWN,WAAX,CAAuB,KAAKM,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKJ,KAAL,CAAWK,MAAhB,EAAwB;AACtB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;AACD,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKL,KAAL,CAAWK,MAAX,CAAkBC,KAAxB,CAAP;AACD;;AATsC,C,CAYzC;AAEA;;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C;AACA;AACA,SAAO;AAAEJ,IAAAA,MAAM,EAAEG,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACR,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAV,GAAP;AACD,CAJD;;AAKA,eAAeV,OAAO,CACpBc,eADoB,EAEpB;AACA;AAAEb,EAAAA;AAAF,CAHoB,CAAP,CAIbG,UAJa,CAAf","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// wiring up the action for data loading, as well as the editStream action creator\r\nimport { fetchStream, editStream } from \"../../actions\";\r\nimport StreamForm from './'\r\n\r\n// With React-Router, each component needs to be designed to work in isolation, meaning it has to pre-fetch its own data.\r\n\r\nclass StreamEdit extends React.Component {\r\n  componentDidMount() {\r\n    this.props.fetchStream(this.props.match.params.id);\r\n  }\r\n  render() {\r\n    if (!this.props.stream) {\r\n      return <div>Loading...</div>;\r\n    }\r\n    return <div>{this.props.stream.title}</div>;\r\n  }\r\n}\r\n\r\n// takes your application state from the store and passes it to your component as a prop.\r\n\r\n// when you have 2 sources of information coming from the StreamEdit props, as well as mapStateToProps, the ownProps arg would also reference the same props from StreamEdit\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  // we are going into the streams object containing a list of streams, and the keys to the streams are stream Ids\r\n  // after this function runs, the stream prop is created and has the object taken from the state obj with the id taken from the ownProps arg.\r\n  return { stream: state.streams[ownProps.match.params.id] };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  // passing the action creator into the connect function\r\n  { fetchStream }\r\n)(StreamEdit);\r\n"]},"metadata":{},"sourceType":"module"}