{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\w_yil\\\\OneDrive\\\\Desktop\\\\twitch\\\\client\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React from \"react\"; // we are using this to validate our form, if the user try to submit the stream without entering anything in the input field, the box will turn red and warning message will appear.\n\nimport { Field, reduxForm } from \"redux-form\";\nimport { connect } from \"react-redux\";\nimport { createStream } from \"../../actions\";\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      // this template string will add error to the className\n      const className = \"field \".concat(meta.error && meta.touched ? \"error\" : \"\"); // de-structured formProps\n\n      return (// this is the jsx for for\n        React.createElement(\"div\", {\n          className: className,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, label), React.createElement(\"input\", Object.assign({}, input, {\n          autoComplete: \"off\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, this.renderError(meta)))\n      );\n    };\n\n    this.onSubmit = formValues => {\n      this.props.createStream(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, error));\n    }\n  }\n\n  render() {\n    return (// different onsubmit with a handleSubmit callback provided by redux-form\n      React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Submit\"))\n    );\n  }\n\n} // helper function for validating formValues\n\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    // only run if the user didn't enter an title\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n}; //wrapping form so you can hook up connect and reduxForm\n\n\nconst formWrapped = reduxForm({\n  form: \"streamCreate\",\n  validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(formWrapped);","map":{"version":3,"sources":["C:\\Users\\w_yil\\OneDrive\\Desktop\\twitch\\client\\src\\components\\streams\\StreamCreate.js"],"names":["React","Field","reduxForm","connect","createStream","StreamCreate","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","render","handleSubmit","validate","errors","title","description","formWrapped","form"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\n// we are using this to validate our form, if the user try to submit the stream without entering anything in the input field, the box will turn red and warning message will appear.\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStream } from \"../../actions\";\r\n\r\nclass StreamCreate extends React.Component {\r\n  renderError({ error, touched }) {\r\n    if (touched && error) {\r\n      return (\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderInput = ({ input, label, meta }) => {\r\n    // this template string will add error to the className\r\n    const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`;\r\n    // de-structured formProps\r\n    return (\r\n\r\n      // this is the jsx for for\r\n      <div className={className}>\r\n        <label>{label}</label>\r\n        <input\r\n          // onChange={formProps.input.onChange}\r\n          // value={formProps.input.value}\r\n          // replacing with  a shorter syntax:\r\n          // also replaced {...formProps.input with de-structure}\r\n          {...input}\r\n          autoComplete=\"off\"\r\n        />\r\n        <div>{this.renderError(meta)}</div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  onSubmit = formValues => {\r\n    this.props.createStream(formValues);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      // different onsubmit with a handleSubmit callback provided by redux-form\r\n      <form\r\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\r\n        className=\"ui form error\"\r\n      >\r\n        <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\r\n        <Field\r\n          name=\"description\"\r\n          component={this.renderInput}\r\n          label=\"Enter Description\"\r\n        />\r\n        <button className=\"ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n// helper function for validating formValues\r\nconst validate = formValues => {\r\n  const errors = {};\r\n\r\n  if (!formValues.title) {\r\n    // only run if the user didn't enter an title\r\n    errors.title = \"You must enter a title\";\r\n  }\r\n  if (!formValues.description) {\r\n    errors.description = \"You must enter a description\";\r\n  }\r\n  return errors;\r\n};\r\n\r\n//wrapping form so you can hook up connect and reduxForm\r\nconst formWrapped = reduxForm({\r\n  form: \"streamCreate\",\r\n  validate\r\n})(StreamCreate);\r\n\r\nexport default connect(\r\n  null,\r\n  { createStream }\r\n)(formWrapped);\r\n"]},"metadata":{},"sourceType":"module"}