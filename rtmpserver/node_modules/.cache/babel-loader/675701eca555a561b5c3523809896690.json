{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\w_yil\\\\OneDrive\\\\Desktop\\\\twitch\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n// importing lodash for the omit method\nimport _ from \"lodash\";\nimport { CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM } from \"../actions/types\";\nexport default ((state = {}, action) => {\n  switch (action.type) {\n    case FETCH_STREAMS:\n      // fetch streams is merging an list of records, which means you need \n      // .mapKeys is lodash for taking an array and returning an object, using the key 'id' as the map target\n      return _objectSpread({}, state, _.mapKeys(action.payload, \"id\"));\n    // key interpolation: able to create something without knowing what it is.\n\n    case FETCH_STREAM:\n      // ...state returns a brand new object, so Redux doesn't think we didn't make changes\n      return _objectSpread({}, state, {\n        [action.payload.id]: action.payload\n      });\n\n    case CREATE_STREAM:\n      return _objectSpread({}, state, {\n        [action.payload.id]: action.payload\n      });\n\n    case EDIT_STREAM:\n      return _objectSpread({}, state, {\n        [action.payload.id]: action.payload\n      });\n\n    case DELETE_STREAM:\n      // payload is the id, so no reference to id, omit does not mutate the value\n      return _.omit(state, action.payload);\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:\\Users\\w_yil\\OneDrive\\Desktop\\twitch\\client\\src\\reducers\\streamReducer.js"],"names":["_","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","DELETE_STREAM","EDIT_STREAM","state","action","type","mapKeys","payload","id","omit"],"mappings":";AAAA;AACA,OAAOA,CAAP,MAAc,QAAd;AACA,SACEC,aADF,EAEEC,aAFF,EAGEC,YAHF,EAIEC,aAJF,EAKEC,WALF,QAMO,kBANP;AAQA,gBAAe,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,aAAL;AACE;AACA;AACA,+BAAYI,KAAZ,EAAsBN,CAAC,CAACS,OAAF,CAAUF,MAAM,CAACG,OAAjB,EAA0B,IAA1B,CAAtB;AACF;;AACA,SAAKP,YAAL;AACE;AACA,+BAAYG,KAAZ;AAAmB,SAACC,MAAM,CAACG,OAAP,CAAeC,EAAhB,GAAqBJ,MAAM,CAACG;AAA/C;;AACF,SAAKT,aAAL;AACE,+BAAYK,KAAZ;AAAmB,SAACC,MAAM,CAACG,OAAP,CAAeC,EAAhB,GAAqBJ,MAAM,CAACG;AAA/C;;AACF,SAAKL,WAAL;AACE,+BAAYC,KAAZ;AAAmB,SAACC,MAAM,CAACG,OAAP,CAAeC,EAAhB,GAAqBJ,MAAM,CAACG;AAA/C;;AACF,SAAKN,aAAL;AACE;AACA,aAAOJ,CAAC,CAACY,IAAF,CAAON,KAAP,EAAcC,MAAM,CAACG,OAArB,CAAP;;AACF;AACE,aAAOJ,KAAP;AAjBJ;AAmBD,CApBD","sourcesContent":["// importing lodash for the omit method\r\nimport _ from \"lodash\";\r\nimport {\r\n  CREATE_STREAM,\r\n  FETCH_STREAMS,\r\n  FETCH_STREAM,\r\n  DELETE_STREAM,\r\n  EDIT_STREAM\r\n} from \"../actions/types\";\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type) {\r\n    case FETCH_STREAMS:\r\n      // fetch streams is merging an list of records, which means you need \r\n      // .mapKeys is lodash for taking an array and returning an object, using the key 'id' as the map target\r\n      return { ...state, ..._.mapKeys(action.payload, \"id\") };\r\n    // key interpolation: able to create something without knowing what it is.\r\n    case FETCH_STREAM:\r\n      // ...state returns a brand new object, so Redux doesn't think we didn't make changes\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case CREATE_STREAM:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case EDIT_STREAM:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case DELETE_STREAM:\r\n      // payload is the id, so no reference to id, omit does not mutate the value\r\n      return _.omit(state, action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}