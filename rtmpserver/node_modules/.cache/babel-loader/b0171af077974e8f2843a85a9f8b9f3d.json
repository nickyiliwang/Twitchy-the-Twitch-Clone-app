{"ast":null,"code":"import streams from \"../apis/streams\";\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM } from \"./types\";\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n}; // following REST conventions we have 1 create stream, 2 get requests, 1st one gets all streams, second, individual stream, 4th action is put request that update the stream, and last is delete\n\nexport const createStream = formValues => async dispatch => {\n  const response = await streams.post(\"/streams\", formValues);\n  dispatch({\n    type: CREATE_STREAM,\n    payload: response.data\n  });\n};\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get(\"/streams\");\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n};\nexport const fetchStream = id => async dispatch => {\n  // using template strings to get individual ids\n  const response = await streams.get(\"/streams/\".concat(id));\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.put(\"/streams/\".concat(id), formValues);\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  });\n};\nexport const deleteStream = id = async dispatch => {\n  await streams.delete(\"/streams/\".concat(id));\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n};","map":{"version":3,"sources":["C:\\Users\\w_yil\\OneDrive\\Desktop\\twitch\\client\\src\\actions\\index.js"],"names":["streams","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","DELETE_STREAM","EDIT_STREAM","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","response","post","data","fetchStreams","get","fetchStream","id","editStream","put","deleteStream","delete"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,SACEC,OADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,YALF,EAMEC,aANF,EAOEC,WAPF,QAQO,SARP;AAUA,OAAO,MAAMC,MAAM,GAAGC,MAAM,IAAI;AAC9B,SAAO;AACLC,IAAAA,IAAI,EAAET,OADD;AAELU,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC3B,SAAO;AACLF,IAAAA,IAAI,EAAER;AADD,GAAP;AAGD,CAJM,C,CAMP;;AAEA,OAAO,MAAMW,YAAY,GAAGC,UAAU,IAAI,MAAMC,QAAN,IAAkB;AAC1D,QAAMC,QAAQ,GAAG,MAAMhB,OAAO,CAACiB,IAAR,CAAa,UAAb,EAAyBH,UAAzB,CAAvB;AACAC,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEP,aAAR;AAAuBQ,IAAAA,OAAO,EAAEK,QAAQ,CAACE;AAAzC,GAAD,CAAR;AACD,CAHM;AAKP,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAMJ,QAAN,IAAkB;AAClD,QAAMC,QAAQ,GAAG,MAAMhB,OAAO,CAACoB,GAAR,CAAY,UAAZ,CAAvB;AACAL,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEN,aAAR;AAAuBO,IAAAA,OAAO,EAAEK,QAAQ,CAACE;AAAzC,GAAD,CAAR;AACD,CAHM;AAKP,OAAO,MAAMG,WAAW,GAAGC,EAAE,IAAI,MAAMP,QAAN,IAAkB;AACjD;AACA,QAAMC,QAAQ,GAAG,MAAMhB,OAAO,CAACoB,GAAR,oBAAwBE,EAAxB,EAAvB;AACAP,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEL,YAAR;AAAsBM,IAAAA,OAAO,EAAEK,QAAQ,CAACE;AAAxC,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMK,UAAU,GAAG,CAACD,EAAD,EAAKR,UAAL,KAAoB,MAAMC,QAAN,IAAkB;AAC9D,QAAMC,QAAQ,GAAG,MAAMhB,OAAO,CAACwB,GAAR,oBAAwBF,EAAxB,GAA8BR,UAA9B,CAAvB;AACAC,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEH,WAAR;AAAqBI,IAAAA,OAAO,EAAEK,QAAQ,CAACE;AAAvC,GAAD,CAAR;AACD,CAHM;AAKP,OAAO,MAAMO,YAAY,GAAGH,EAAE,GAAG,MAAMP,QAAN,IAAkB;AACjD,QAAMf,OAAO,CAAC0B,MAAR,oBAA2BJ,EAA3B,EAAN;AACAP,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEJ,aAAR;AAAuBK,IAAAA,OAAO,EAAEW;AAAhC,GAAD,CAAR;AACD,CAHM","sourcesContent":["import streams from \"../apis/streams\";\r\nimport {\r\n  SIGN_IN,\r\n  SIGN_OUT,\r\n  CREATE_STREAM,\r\n  FETCH_STREAMS,\r\n  FETCH_STREAM,\r\n  DELETE_STREAM,\r\n  EDIT_STREAM\r\n} from \"./types\";\r\n\r\nexport const signIn = userId => {\r\n  return {\r\n    type: SIGN_IN,\r\n    payload: userId\r\n  };\r\n};\r\n\r\nexport const signOut = () => {\r\n  return {\r\n    type: SIGN_OUT\r\n  };\r\n};\r\n\r\n// following REST conventions we have 1 create stream, 2 get requests, 1st one gets all streams, second, individual stream, 4th action is put request that update the stream, and last is delete\r\n\r\nexport const createStream = formValues => async dispatch => {\r\n  const response = await streams.post(\"/streams\", formValues);\r\n  dispatch({ type: CREATE_STREAM, payload: response.data });\r\n};\r\n\r\nexport const fetchStreams = () => async dispatch => {\r\n  const response = await streams.get(\"/streams\");\r\n  dispatch({ type: FETCH_STREAMS, payload: response.data });\r\n};\r\n\r\nexport const fetchStream = id => async dispatch => {\r\n  // using template strings to get individual ids\r\n  const response = await streams.get(`/streams/${id}`);\r\n  dispatch({ type: FETCH_STREAM, payload: response.data });\r\n};\r\n\r\nexport const editStream = (id, formValues) => async dispatch => {\r\n  const response = await streams.put(`/streams/${id}`, formValues);\r\n  dispatch({ type: EDIT_STREAM, payload: response.data });\r\n};\r\n\r\nexport const deleteStream = id = async dispatch => {\r\n  await streams.delete(`/streams/${id}`);\r\n  dispatch({ type: DELETE_STREAM, payload: id });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}