{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\w_yil\\\\OneDrive\\\\Desktop\\\\twitch\\\\client\\\\src\\\\components\\\\streams\\\\StreamEdit.js\";\nimport React from \"react\";\nimport { connect } from 'react-redux';\n\nconst StreamEdit = props => {\n  console.log(props);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, \"StreamEdit\");\n}; // takes your application state from the store and passes it to your component as a prop.\n// when you have 2 sources of information coming from the StreamEdit props, as well as mapStateToProps, the ownProps arg would also reference the same props from StreamEdit\n\n\nconst mastStateToProps = (state, ownProps) => {\n  // we are going into the streams object containing a list of streams, and the keys to the streams are stream Ids\n  // after this function runs, the stream prop is created and has the object taken from the state obj with the id taken from the ownProps arg.\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mastStateToProps)(StreamEdit);","map":{"version":3,"sources":["C:\\Users\\w_yil\\OneDrive\\Desktop\\twitch\\client\\src\\components\\streams\\StreamEdit.js"],"names":["React","connect","StreamEdit","props","console","log","mastStateToProps","state","ownProps","stream","streams","match","params","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD,CAHD,C,CAKA;AAEA;;;AAEA,MAAMG,gBAAgB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC5C;AACA;AACA,SAAO;AAACC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAcF,QAAQ,CAACG,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAT,GAAP;AACD,CAJD;;AAKA,eAAeZ,OAAO,CAACK,gBAAD,CAAP,CAA2BJ,UAA3B,CAAf","sourcesContent":["import React from \"react\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst StreamEdit = (props) => {\r\n  console.log(props);\r\n  return <div>StreamEdit</div>;\r\n};\r\n\r\n// takes your application state from the store and passes it to your component as a prop.\r\n\r\n// when you have 2 sources of information coming from the StreamEdit props, as well as mapStateToProps, the ownProps arg would also reference the same props from StreamEdit\r\n\r\nconst mastStateToProps = (state, ownProps) => {\r\n  // we are going into the streams object containing a list of streams, and the keys to the streams are stream Ids\r\n  // after this function runs, the stream prop is created and has the object taken from the state obj with the id taken from the ownProps arg.\r\n  return {stream: state.streams[ownProps.match.params.id]}\r\n}\r\nexport default connect(mastStateToProps) (StreamEdit);\r\n"]},"metadata":{},"sourceType":"module"}