{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\w_yil\\\\OneDrive\\\\Desktop\\\\twitch\\\\client\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\n\nclass StreamCreate extends React.Component {\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, error));\n    }\n  }\n\n  renderInput({\n    input,\n    label,\n    meta\n  }) {\n    // de-structured formProps\n    console.log(meta);\n    return React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, label), React.createElement(\"input\", Object.assign({}, input, {\n      autoComplete: \"off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, meta.error));\n  }\n\n  onSubmit(formValues) {\n    console.log(formValues);\n  }\n\n  render() {\n    return (// different onsubmit with a handleSubmit callback provided by redux-form\n      React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Submit\"))\n    );\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    // only run if the user didn't enter an title\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: \"streamCreate\",\n  validate\n})(StreamCreate);","map":{"version":3,"sources":["C:\\Users\\w_yil\\OneDrive\\Desktop\\twitch\\client\\src\\components\\streams\\StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","Component","renderError","error","touched","renderInput","input","label","meta","console","log","onSubmit","formValues","render","props","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AAC3CC,EAAAA,WAAW,CAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,EAAmB;AAC5B,QAAIA,OAAO,IAAID,KAAf,EAAsB;AACpB,aACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBA,KAAzB,CADF,CADF;AAKD;AACF;;AAECE,EAAAA,WAAW,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB,GAAD,EAAyB;AAClC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,WACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQD,KAAR,CADF,EAEE,+CAKMD,KALN;AAKa,MAAA,YAAY,EAAC,KAL1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAME,IAAI,CAACL,KAAX,CATF,CADF;AAaD;;AAEDQ,EAAAA,QAAQ,CAACC,UAAD,EAAa;AACnBH,IAAAA,OAAO,CAACC,GAAR,CAAYE,UAAZ;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE;AACA;AACE,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKJ,QAA7B,CADZ;AAEE,QAAA,SAAS,EAAC,SAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKN,WAApC;AAAiD,QAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAKE,oBAAC,KAAD;AACE,QAAA,IAAI,EAAC,aADP;AAEE,QAAA,SAAS,EAAE,KAAKA,WAFlB;AAGE,QAAA,KAAK,EAAC,mBAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,EAUE;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVF;AAFF;AAeD;;AAjDwC;;AAoD3C,MAAMW,QAAQ,GAAGJ,UAAU,IAAI;AAC7B,QAAMK,MAAM,GAAG,EAAf;;AAEA,MAAI,CAACL,UAAU,CAACM,KAAhB,EAAuB;AACrB;AACAD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACD;;AACD,MAAI,CAACN,UAAU,CAACO,WAAhB,EAA6B;AAC3BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACD;;AACD,SAAOF,MAAP;AACD,CAXD;;AAaA,eAAelB,SAAS,CAAC;AACvBqB,EAAAA,IAAI,EAAE,cADiB;AAEvBJ,EAAAA;AAFuB,CAAD,CAAT,CAGZhB,YAHY,CAAf","sourcesContent":["import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\n\r\nclass StreamCreate extends React.Component {\r\nrenderError({error, touched}) {\r\n  if (touched && error) {\r\n    return (\r\n      <div className=\"ui error message\">\r\n        <div className=\"header\">{error}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n  renderInput({ input, label, meta }) {\r\n    // de-structured formProps\r\n    console.log(meta);\r\n    return (\r\n      <div className=\"field\">\r\n        <label>{label}</label>\r\n        <input\r\n          // onChange={formProps.input.onChange}\r\n          // value={formProps.input.value}\r\n          // replacing with  a shorter syntax:\r\n          // also replaced {...formProps.input with de-structure}\r\n          {...input} autoComplete=\"off\"\r\n        />\r\n        <div>{meta.error}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onSubmit(formValues) {\r\n    console.log(formValues);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // different onsubmit with a handleSubmit callback provided by redux-form\r\n      <form\r\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\r\n        className=\"ui form\"\r\n      >\r\n        <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\r\n        <Field\r\n          name=\"description\"\r\n          component={this.renderInput}\r\n          label=\"Enter Description\"\r\n        />\r\n        <button className=\"ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst validate = formValues => {\r\n  const errors = {};\r\n\r\n  if (!formValues.title) {\r\n    // only run if the user didn't enter an title\r\n    errors.title = \"You must enter a title\";\r\n  }\r\n  if (!formValues.description) {\r\n    errors.description = \"You must enter a description\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport default reduxForm({\r\n  form: \"streamCreate\",\r\n  validate\r\n})(StreamCreate);\r\n"]},"metadata":{},"sourceType":"module"}