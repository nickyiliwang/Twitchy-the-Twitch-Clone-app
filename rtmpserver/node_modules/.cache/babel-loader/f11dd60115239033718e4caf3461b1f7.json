{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\w_yil\\\\OneDrive\\\\Desktop\\\\twitch\\\\client\\\\src\\\\components\\\\streams\\\\StreamEdit.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\"; // With React-Router, each component needs to be designed to work in isolation, meaning it has to pre-fetch its own data.\n\nclass StreamEdit extends React.Component {\n  componentDidMount() {\n    this.props.s;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, \"StreamEdit\");\n  }\n\n}\n\n; // takes your application state from the store and passes it to your component as a prop.\n// when you have 2 sources of information coming from the StreamEdit props, as well as mapStateToProps, the ownProps arg would also reference the same props from StreamEdit\n\nconst mastStateToProps = (state, ownProps) => {\n  // we are going into the streams object containing a list of streams, and the keys to the streams are stream Ids\n  // after this function runs, the stream prop is created and has the object taken from the state obj with the id taken from the ownProps arg.\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mastStateToProps)(StreamEdit);","map":{"version":3,"sources":["C:\\Users\\w_yil\\OneDrive\\Desktop\\twitch\\client\\src\\components\\streams\\StreamEdit.js"],"names":["React","connect","StreamEdit","Component","componentDidMount","props","s","render","mastStateToProps","state","ownProps","stream","streams","match","params","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;AAGA,MAAMC,UAAN,SAAyBF,KAAK,CAACG,SAA/B,CAAwC;AACxCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWC,CAAX;AACD;;AACCC,EAAAA,MAAM,GAAG;AACP,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AAED;;AAPqC;;AAUvC,C,CAED;AAEA;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC5C;AACA;AACA,SAAO;AAAEC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAcF,QAAQ,CAACG,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAV,GAAP;AACD,CAJD;;AAKA,eAAed,OAAO,CAACO,gBAAD,CAAP,CAA0BN,UAA1B,CAAf","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// With React-Router, each component needs to be designed to work in isolation, meaning it has to pre-fetch its own data.\r\n\r\n\r\nclass StreamEdit extends React.Component{\r\ncomponentDidMount() {\r\n  this.props.s\r\n}\r\n  render() {\r\n    return <div>StreamEdit</div>;\r\n\r\n  }\r\n\r\n\r\n};\r\n\r\n// takes your application state from the store and passes it to your component as a prop.\r\n\r\n// when you have 2 sources of information coming from the StreamEdit props, as well as mapStateToProps, the ownProps arg would also reference the same props from StreamEdit\r\n\r\nconst mastStateToProps = (state, ownProps) => {\r\n  // we are going into the streams object containing a list of streams, and the keys to the streams are stream Ids\r\n  // after this function runs, the stream prop is created and has the object taken from the state obj with the id taken from the ownProps arg.\r\n  return { stream: state.streams[ownProps.match.params.id] };\r\n};\r\nexport default connect(mastStateToProps)(StreamEdit);\r\n"]},"metadata":{},"sourceType":"module"}